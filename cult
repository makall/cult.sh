#!/usr/bin/env bash
#
#  CUrL Tester
#  A simple REST test framework for shell script.
#
# shellcheck disable=SC1090
# vim: ts=2 sw=2 sts=2 expandtab smartindent smarttab

set -o errexit -o nounset -o pipefail

: "${CULT_USER:=}"
: "${CULT_CLIENT:=}"
: "${CULT_WAIT:=}"
: "${CULT_STEP:=}"
: "${CULT_CASE:=}"
: "${CULT_SCENARIO:=}"

: "${CULT_ENV:=.cult}"

: "${CURRENT_STEP:=}"
: "${CURRENT_CASE:=}"
: "${CURRENT_SCENARIO:=}"
: "${CURRENT_RESPONSE:=}"
: "${CURRENT_CLIENT:=}"
: "${CURRENT_USER:=}"
: "${CURRENT_TOKEN:=}"
: "${CURRENT_TOKEN_EXPIRATION:=}"

: "${LOGOUT:=}"

declare -a REQUEST_PARAMS
declare -a QUERY_PARAMS
declare -a CULT_ASSERT
declare -a CULT_PRINT
declare -A CULT_VARIABLES
declare -A CURRENT_VARIABLES

FAIL_ICON=$'\e[31;1m\u2717\e[m'
WARN_ICON=$'\e[33;1m\u25CF\e[m'
INFO_ICON=$'\e[32;1m\u2714\e[m'
STEP_ICONS=(
	$'\e[33;1m\u25cb\e[m'
	$'\e[33;1m\u25cf\e[m'
	$'\e[33;1m\u25cb\e[m'
	$'\e[33;1m\u25cc\e[m'
)

logo() {
	echo -e $'\e[33;1m    ___             __   _____\e[m          _'
	echo -e $'\e[33;1m   / __\/\ /\\\e[m _ __ \e[33;1m/ /  /__   \\\e[m___  ___| |_ ___ _ __'
	echo -e $'\e[33;1m  / /  / / \ \\\e[m \'__\e[33;1m/ /     / /\/\e[m _ \/ __| __/ _ \ \'__|'
	echo -e $'\e[33;1m / /___\ \_/ /\e[m | \e[33;1m/ /___  / /\e[m |  __/\__ \ ||  __/ |'
	echo -e $'\e[33;1m \____/ \___/\e[m|_| \e[33;1m\____/  \/\e[m   \___||___/\__\___|_|\n'
}

cleanup() {
	echo "CURRENT_BEGIN=$(date +%s)" > "$CULT_CACHE"
	echo -n > "$CULT_TRACE"
	echo -n > "$CULT_LOG"
}

setup() {
	exec > >(tee --append "$CULT_LOG")
	exec 2>&1
}

logger() {

	local LOG_SIZE
	local FAILED="${2:-0}"
	local REPORT="${3:-0}"
	local CULT_ITEM="CULT_$1"
	local CURRENT_ITEM="CURRENT_$1"
	local CURRENT_ICON="CURRENT_$1_ICON"
	local CURRENT_LINE="CURRENT_$1_LINE"

	[ -n "${!CULT_ITEM}" ] && echo "[$1] ${!CULT_ITEM}" >&"$TRACE"
	[ 0 -ne "$FAILED" ] && [ -n "${!CURRENT_ITEM}" ] && echo "[$1:FAILED] ${!CURRENT_ITEM}" >&"$TRACE"

	if [ -n "${!CULT_ITEM}" ] && [ "${!CULT_ITEM}" != "${!CURRENT_ITEM}" ]; then
		echo -e " ${STEP_ICONS[0]} ${!CULT_ITEM}"
		declare -g "$CURRENT_ICON=1"
	fi

	LOG_SIZE=$(wc -l "$CULT_LOG" | cut -d ' ' -f1)

	if [ -n "${!CURRENT_ITEM}" ]; then

		local ICON="$INFO_ICON"
		local POS=$((1 + LOG_SIZE - ${!CURRENT_LINE}))

		if [ 0 -ne "$FAILED" ]; then
			ICON="$FAIL_ICON"
		elif [ 0 -ne "$REPORT" ]; then
			ICON="$INFO_ICON"
		elif [ -z "${!CULT_ITEM}" ] || [ "${!CULT_ITEM}" = "${!CURRENT_ITEM}" ]; then
			ICON="${STEP_ICONS[$((${!CURRENT_ICON} % "${#STEP_ICONS[@]}"))]}"
			declare -g "$CURRENT_ICON=$((1 + ${!CURRENT_ICON}))"
		fi

		echo -ne "\e[s\e[${POS}A\r $ICON\e[u"
	fi

	if [ 0 -ne "$FAILED" ] || [ -n "${!CULT_ITEM}" ] && [ "${!CULT_ITEM}" != "${!CURRENT_ITEM}" ]; then
		declare -g "$CURRENT_LINE=$LOG_SIZE"
		declare -g "$CURRENT_ITEM=${!CULT_ITEM}"
	fi
}

request() {

	local JSON
	local STATUS

	local CURL=(curl --silent --verbose "$@")
	CURL+=(--write-out '%{http_code}' --output "$OUTPUT" --header "X-Cult-Trace-Id: $TRACE_ID")

	if [ -n "$CURRENT_TOKEN" ]; then
		CURL+=(--header "Authorization: Bearer $CURRENT_TOKEN")
	fi

	{
		echo -n "[REQUEST] ${CURL[0]}"
		printf " %q" "${CURL[@]:1}"
		echo
	} >&"$TRACE"

	while true; do
		STATUS=$("${CURL[@]}" 2>&"$TRACE" || test -n "$CULT_WAIT")
		[ "$STATUS" != '000' ] && break
		sleep 1
		logger "STEP"
	done

	JSON=$(jq < "$OUTPUT" 2>&$"$TRACE" || jq --raw-input --slurp --ascii-output < "$OUTPUT")

	CURRENT_RESPONSE="{ \"status\": $STATUS, \"json\": ${JSON:-\"\"} }"
	echo "[RESPONSE] $CURRENT_RESPONSE" >&"$TRACE"
}

auth_setup() {
	local CULT_ITEM="CULT_$1"
	local CURRENT_ITEM="CURRENT_$1"
	if [ -n "${!CULT_ITEM}" ] && [ "${!CULT_ITEM}" != "${!CURRENT_ITEM}" ]; then
		declare -g "$CURRENT_ITEM=${!CULT_ITEM}"
		CURRENT_TOKEN=''
	fi
}

throw() {
	echo -e " $FAIL_ICON $*"
	false
}

auth() {

	auth_setup 'USER'
	auth_setup 'CLIENT'

	if [ -n "$CURRENT_CLIENT" ]; then

		[ -n "${CLIENTS[$CURRENT_CLIENT]:-}" ] || throw "Client not defined: $CURRENT_CLIENT"

		if [ -z "$CURRENT_TOKEN" ] || [ "$(date '+%s')" -gt "${CURRENT_TOKEN_EXPIRATION:-0}" ]; then

			local DATA="grant_type=client_credentials"

			CURRENT_TOKEN=''

			if [ -n "$CURRENT_USER" ]; then
				[ -n "${USERS[$CURRENT_USER]:-}" ] || throw "User not defined: $CURRENT_USER"
				DATA="grant_type=password&username=$CURRENT_USER&password=${USERS[$CURRENT_USER]}"
			fi

			request "$TOKEN_ENDPOINT" \
				--header 'Content-Type: application/x-www-form-urlencoded' \
				--header "Authorization: Basic $(echo -n "$CURRENT_CLIENT:${CLIENTS[$CURRENT_CLIENT]}" | base64 --wrap=0)" \
				--data-raw "$DATA"

			query --exit-status ".status == 200" >&2

			CURRENT_TOKEN=$(query --exit-status --raw-output .json.access_token)
			CURRENT_TOKEN_EXPIRATION=$(query --exit-status --raw-output ".json.expires_in + $(date '+%s')")

		fi

	else
		CURRENT_TOKEN=''
	fi
}

count() {
	grep -cE "^[^:]+: \[$*\]" "$CULT_TRACE" || true
}

entry() {
	echo "$1 : $(count "$2") : $(count "$2:FAILED")"
}

report() {

	local FAILED="$?"

	REQUESTS=$(count 'REQUEST')
	RESPONSES=$(count 'REQUEST')

	ASSERTIONS=$(count 'ASSERT')
	SUCCESSES=$(count 'INFO')

	FAILS=$((REQUESTS - RESPONSES + ASSERTIONS - SUCCESSES + $(count '[^:]+:FAILED')))

	. "$CULT_CACHE"

	flush '0' '1' || true

	# Show report only at the end of the root script
	if [ "$(ps -o stat= -p $$)" != "$(ps -o stat= -p $PPID)" ]; then

		echo -e $'\n\e[37;1mReport\e[m\n'

		cat <<- EOF | column -ts: | sed 's/^/ /'
			Items : Executed : Failed
			$(entry "Scenarios" "SCENARIO")
			$(entry "Cases" "CASE")
			$(entry "Steps" "STEP")
			Requests : $REQUESTS : $((REQUESTS - RESPONSES))
			Assertions : $ASSERTIONS : $((ASSERTIONS - SUCCESSES))
		EOF

		[ -n "${CURRENT_BEGIN:-}" ] && echo -e "\n Total run duration: $(($(date '+%s') - CURRENT_BEGIN))s"

		echo -e $'\n\e[37;1mResult\e[m\n'

		if [ 0 -ne "$FAILS" ]; then
			echo -e " $FAIL_ICON FAILED\n"
		elif [ 0 -ne "$FAILED" ]; then
			echo -e " $WARN_ICON Script existed with an error\n"
		else
			echo -e " $INFO_ICON SUCCEEDED\n"
		fi

	fi

	return "$FAILED"
}

prepare_query_params() {
	for VARIABLE in "${!CURRENT_VARIABLES[@]}"; do
		QUERY_PARAMS+=(--arg "$VARIABLE" "${CURRENT_VARIABLES["$VARIABLE"]}")
	done
}

query() {
	jq "${QUERY_PARAMS[@]}" "$@" <<< "${CURRENT_RESPONSE:-{\}}"
}

assert_all() {
	for ASSERT in "${CULT_ASSERT[@]}"; do
		echo "[ASSERT] $ASSERT" >&"$TRACE"
		query --exit-status "$ASSERT" >&"$TRACE"
		echo "[INFO] $ASSERT" >&"$TRACE"
	done
}

extract_variables() {
	for VARIABLE in "${!CULT_VARIABLES[@]}"; do
		echo "[VARIABLE] $VARIABLE" >&"$TRACE"
		CURRENT_VARIABLES["$VARIABLE"]=$(query --raw-output "${CULT_VARIABLES["$VARIABLE"]}" || echo null)
	done
}

substitute_request_params() {
	local VAR
	local VARS
	local PARAM

	VARS=$(printf "\$%s " "${!CURRENT_VARIABLES[@]}")

	for VAR in "${!CURRENT_VARIABLES[@]}"; do
		declare -x "$VAR=${CURRENT_VARIABLES[$VAR]}"
	done

	for PARAM in "$@"; do
		REQUEST_PARAMS+=("$(envsubst "${VARS[@]}" <<< "$PARAM")")
	done
}

print_all() {
	for PRINT in "${CULT_PRINT[@]}"; do
		echo "[PRINT] $PRINT" >&"$TRACE"
		query --color-output "$PRINT"
	done
}

flush() {

	local FAILED="${1:-$?}"
	local REPORT="${2:-0}"

	if [ 0 -ne "$FAILED" ] || [ 0 -ne "$REPORT" ]; then
		CULT_SCENARIO='' logger "SCENARIO" "$FAILED" "$REPORT"
		CULT_CASE='' logger "CASE" "$FAILED" "$REPORT"
		CULT_STEP='' logger "STEP" "$FAILED" "$REPORT"
	fi

	for CURRENT in $(set | sed -nE 's/^(CURRENT_[^=]*)=.*/\1/p'); do
		declare -p "$CURRENT"
	done > "$CULT_CACHE"

	return "$FAILED"
}

check_param() {
	[ 1 -lt "$#" ] && return
	throw "'$1' parameter value is expected"
}

while true; do
	case "${1:-}" in
		-w | --wait) CULT_WAIT="1" ;;
		--logout) LOGOUT="1" ;;
		-t | --test | -a | --assert)
			check_param "$@"
			CULT_ASSERT+=("$2")
			shift
			;;
		-e | --env)
			check_param "$@"
			CULT_ENV="$2"
			shift
			;;
		-p | --print)
			check_param "$@"
			CULT_PRINT+=("$2")
			shift
			;;
		-v | --var)
			check_param "$@"
			CULT_VARIABLES["$2"]="$3"
			shift 2
			;;
		-s | --step | --test-step)
			check_param "$@"
			CULT_STEP="           $2"
			shift
			;;
		-c | --case | --test-case)
			check_param "$@"
			CULT_CASE="     Case: $2"
			shift
			;;
		-S | --scenario | --test-scenario)
			check_param "$@"
			CULT_SCENARIO=" Scenario: $2"
			shift
			;;
		-u | --user)
			check_param "$@"
			CULT_USER="$2"
			shift
			;;
		-C | --client)
			check_param "$@"
			CULT_CLIENT="$2"
			shift
			;;
		--)
			shift
			break
			;;
		*) break ;;
	esac
	shift
done

CULT_TEMP_DIR="/tmp/cult"

mkdir -p "$CULT_TEMP_DIR"

CULT_LOG="$CULT_TEMP_DIR/log"
CULT_CACHE="$CULT_TEMP_DIR/cache"
CULT_EMPTY="$CULT_TEMP_DIR/empty"
CULT_TRACE="$CULT_TEMP_DIR/trace"

OUTPUT=$(mktemp)
TRACE_ID="${OUTPUT#*.}"
exec {TRACE}> >(sed "s/^/${TRACE_ID}: /" >> "$CULT_TRACE")

if [ "${BASH_SOURCE[0]}" != "$0" ]; then

	if [ 2 -eq "$SHLVL" ]; then
		cleanup
		setup
		logo
	fi

	trap 'report' EXIT
	return
fi

trap 'flush' EXIT

[ -f "$CULT_CACHE" ] && . "$CULT_CACHE"
[ -f "$CULT_ENV" ] && . "$CULT_ENV"

if [ -n "$LOGOUT" ]; then
	CURRENT_CLIENT=''
	CURRENT_TOKEN=''
	CURRENT_USER=''
fi

logger "SCENARIO"
logger "CASE"
logger "STEP"

prepare_query_params

if [ 0 -lt "$#" ]; then

	auth

	if [ ! -t 0 ]; then
		echo '{}' > "$CULT_EMPTY"
		REQUEST_PARAMS+=(--header "Content-Type: application/json")
		REQUEST_PARAMS+=(--data-binary "$(jq "${QUERY_PARAMS[@]}" --from-file /dev/stdin "$CULT_EMPTY")")
	fi

	substitute_request_params "$@"

	request "${REQUEST_PARAMS[@]}"
fi

assert_all
extract_variables
print_all
