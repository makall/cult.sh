#!/usr/bin/env bash
#
#  CUrL Tester
#  A simple REST test framework for shell script.
#
# vim: ts=2 sw=2 sts=2 expandtab smartindent smarttab

set -o errexit -o nounset -o pipefail

: "${CULT_BEGIN:=}"
: "${CULT_USER:=}"
: "${CULT_CLIENT:=}"
: "${CULT_STEP:=}"
: "${CULT_CASE:=}"
: "${CULT_SCENARIO:=}"

: "${SHOW_LOG:=}"
: "${SHOW_HELP:=}"
: "${SHOW_REPORT:=}"

: "${CURRENT_STEP:=}"
: "${CURRENT_CASE:=}"
: "${CURRENT_SCENARIO:=}"
: "${CURRENT_RESPONSE:=}"
: "${CURRENT_CLIENT:=}"
: "${CURRENT_USER:=}"
: "${CURRENT_TOKEN:=}"
: "${CURRENT_TOKEN_EXPIRATION:=}"

: "${STANDALONE:=}"
: "${LOGOUT:=}"
: "${LOG_OFFSET:=0}"
: "${LOCAL_ENV:=.cult}"

declare -a QUERY_PARAMS
declare -a CULT_ASSERT
declare -a CULT_PRINT
declare -A CULT_VARIABLES
declare -A CURRENT_VARIABLES

FAIL='\u2717'
STEPS=('\u25cb' '\u25cf' '\u25cb' '\u25cc')
SUCCESS='\u2714'

tint() {
	printf "\e[%d;1m%b\e[m" "$@"
	echo
}

cleanup() {

	tint 33 '    ___             __   _____          ' 0 '_'
	tint 33 "   / __\/\ /\\" 0 ' _ __ ' 33 "/ /  /__   \\" 0 '___  ___| |_ ___ _ __'
	tint 33 "  / /  / / \ \\" 0 " '__" 33 '/ /     / /\/' 0 " _ \/ __| __/ _ \ '__|"
	tint 33 ' / /___\ \_/ /' 0 ' | ' 33 '/ /___  / /' 0 ' |  __/\__ \ ||  __/ |'
	tint 33 ' \____/ \___/' 0 '|_| ' 33 '\____/  \/' 0 '   \___||___/\__\___|_|\n'

	echo "CURRENT_BEGIN=$(date +%s)" > "$CULT_ENV"
	echo -n > "$CULT_TRACE"
	echo -n > "$CULT_LOG"
}

trace() {
	echo "$*" >&2
}

logger() {

	local CULT_ITEM="CULT_$1"
	local CURRENT_ITEM="CURRENT_$1"
	local CURRENT_ICON="CURRENT_$1_ICON"
	local CURRENT_LINE="CURRENT_$1_LINE"

	local FLUSH="${CULT_FLUSH:-}"
	local FAILED="${CULT_FAIL:-}"

	[ -n "${!CULT_ITEM}" ] && trace "[$1] ${!CULT_ITEM}"
	[ -n "$FAILED" ] && [ -n "${!CURRENT_ITEM}" ] && trace "[$1:FAILED] ${!CURRENT_ITEM}"

	if [ -n "${!CULT_ITEM}" ] && [ "${!CULT_ITEM}" != "${!CURRENT_ITEM}" ]; then
		tint 33 " ${STEPS[0]}" 0 " ${!CULT_ITEM}"
		declare -g "$CURRENT_ICON=1"
	fi

	CURRENT_LOG_SIZE=$(wc -l "$CULT_LOG" | cut -d ' ' -f1)

	if [ -n "${!CURRENT_ITEM}" ] && [ "${!CURRENT_LINE}" -gt "$LOG_OFFSET" ]; then

		local POS
		local MSG
		local ICON

		if [ -n "$FAILED" ]; then
			ICON=$(tint 31 "$FAIL")
		elif [ -n "${FLUSH:-}" ]; then
			ICON=$(tint 32 "$SUCCESS")
		elif [ -z "${!CULT_ITEM}" ] || [ "${!CULT_ITEM}" = "${!CURRENT_ITEM}" ]; then
			ICON=$(tint 33 "${STEPS[$((${!CURRENT_ICON} % "${#STEPS[@]}"))]}")
		else
			ICON=$(tint 32 "$SUCCESS")
		fi

		POS=$((CURRENT_LOG_SIZE - ${!CURRENT_LINE} + 1))
		MSG=" $ICON $(tint 0 "${!CURRENT_ITEM}")"

		echo -ne "\e[s\e[${POS}A\r$MSG\e[0K\e[u"

		declare -g "$CURRENT_ICON=$((1 + ${!CURRENT_ICON:-0}))"

	fi

	if [ -n "${CULT_FLUSH:-}" ] || [ -n "${!CULT_ITEM}" ] && [ "${!CULT_ITEM}" != "${!CURRENT_ITEM}" ]; then
		declare -g "$CURRENT_LINE=$CURRENT_LOG_SIZE"
		declare -g "$CURRENT_ITEM=${!CULT_ITEM}"
	fi
}

request() {

	local JSON
	local STATUS

	local CURL=(curl --silent --verbose "$@")
	CURL+=(--write-out '%{http_code}' --output "$OUTPUT" --header "X-Cult-Trace-Id: $TRACE_ID")

	if [ ! -t 0 ]; then
		echo '{}' > "$CULT_EMPTY"
		CURL+=(--header "Content-Type: application/json")
		CURL+=(--data-binary "$(jq "${QUERY_PARAMS[@]}" --from-file /dev/stdin "$CULT_EMPTY")")
	fi

	if [ -n "$CURRENT_TOKEN" ]; then
		CURL+=(--header "Authorization: Bearer $CURRENT_TOKEN")
	fi

	{
		echo -n "[REQUEST] ${CURL[0]}"
		printf " %q" "${CURL[@]:1}"
		echo
	} >&2

	STATUS=$("${CURL[@]}")
	JSON=$(jq < "$OUTPUT" || jq --raw-input --slurp --ascii-output < "$OUTPUT")

	CURRENT_RESPONSE="{ \"status\": $STATUS, \"json\": $JSON }"
	trace "[RESPONSE] $CURRENT_RESPONSE"
}

auth_setup() {
	local CULT_ITEM="CULT_$1"
	local CURRENT_ITEM="CURRENT_$1"
	if [ -n "${!CULT_ITEM}" ] && [ "${!CULT_ITEM}" != "${!CURRENT_ITEM}" ]; then
		declare -g "$CURRENT_ITEM=${!CULT_ITEM}"
		CURRENT_TOKEN=''
	fi
}

auth() {

	auth_setup 'USER'
	auth_setup 'CLIENT'

	if [ -n "$CURRENT_CLIENT" ]; then

		if [ -z "$CURRENT_TOKEN" ] || [ "$(date '+%s')" -gt "${CURRENT_TOKEN_EXPIRATION:-0}" ]; then

			local DATA="grant_type=client_credentials"

			CURRENT_TOKEN=''

			if [ -n "$CURRENT_USER" ]; then
				DATA="grant_type=password&username=$CURRENT_USER&password=${USERS[$CURRENT_USER]}"
			fi

			request "$TOKEN_ENDPOINT" \
				--header 'Content-Type: application/x-www-form-urlencoded' \
				--header "Authorization: Basic $(echo -n "$CURRENT_CLIENT:${CLIENTS[$CURRENT_CLIENT]}" | base64)" \
				--data-raw "$DATA"

			query --exit-status ".status == 200" >&2

			CURRENT_TOKEN=$(query --exit-status .json.access_token)
			CURRENT_TOKEN_EXPIRATION=$(query --exit-status ".json.expires_in + $(date '+%s')")

		fi

	else
		CURRENT_TOKEN=''
	fi
}

count() {
	grep -cE "^[^:]+: \[$*\]" "$CULT_TRACE" || true
}

entry() {
	echo "$1 : $(count "$2") : $(count "$2:FAILED")"
}

report() {

	local FAILS
	local REQUESTS
	local RESPONSES
	local ASSERTIONS
	local SUCCESSES

	REQUESTS=$(count 'REQUEST')
	RESPONSES=$(count 'REQUEST')

	ASSERTIONS=$(count 'ASSERT')
	SUCCESSES=$(count 'SUCCESS')

	FAILS=$((REQUESTS - RESPONSES + ASSERTIONS - SUCCESSES + $(count '[^:]+:FAILED')))

	tint 37 "\nReport\n"

	cat <<- EOF | column -ts: | sed 's/^/ /'
		Items : Executed : Failed
		$(entry "Scenarios" "SCENARIO")
		$(entry "Cases" "CASE")
		$(entry "Steps" "STEP")
		Requests : $REQUESTS : $((REQUESTS - RESPONSES))
		Assertions : $ASSERTIONS : $((ASSERTIONS - SUCCESSES))
	EOF

	echo -e "\n Total run duration: $(($(date '+%s') - CURRENT_BEGIN))s"

	tint 37 '\nResult\n'

	if [ 0 -eq "$FAILS" ]; then
		tint 32 " $SUCCESS SUCCEEDED\n"
	else
		tint 31 " $FAIL FAILED\n"
	fi

	exit "$FAILS"
}

prepare_query_params() {
	for VARIABLE in "${!CURRENT_VARIABLES[@]}"; do
		QUERY_PARAMS+=(--arg "$VARIABLE" "${CURRENT_VARIABLES["$VARIABLE"]}")
	done
}

query() {
	jq "${QUERY_PARAMS[@]}" "$@" <<< "${CURRENT_RESPONSE:-{\}}"
}

assert_all() {
	for ASSERT in "${CULT_ASSERT[@]}"; do
		trace "[ASSERT] $ASSERT"
		query --exit-status "$ASSERT" >&2
		trace "[SUCCESS] $ASSERT"
	done
}

extract_variables() {
	for VARIABLE in "${!CULT_VARIABLES[@]}"; do
		trace "[VARIABLE] $VARIABLE"
		CURRENT_VARIABLES["$VARIABLE"]=$(query --raw-output "${CULT_VARIABLES["$VARIABLE"]}")
		trace "[VARIABLE] $VARIABLE=${CURRENT_VARIABLES["$VARIABLE"]}"
	done
}

print_all() {
	for PRINT in "${CULT_PRINT[@]}"; do
		trace "[PRINT] $PRINT"
		query --color-output "$PRINT"
	done
}

fail() {
	tint 37 "\nTrace\n"
	sed -n "s/^$TRACE_ID://p" "$CULT_TRACE"
}

flush() {

	local CULT_FAIL="${?%0}"
	local CULT_FLUSH="1"

	if [ -n "$CULT_FAIL" ] || [ -n "$SHOW_REPORT" ]; then
		CULT_STEP='' logger "STEP"
		CULT_CASE='' logger "CASE"
		CULT_SCENARIO='' logger "SCENARIO"
	elif [ -n "$STANDALONE" ]; then
		CULT_STEP='' logger "STEP"
	fi

	for CURRENT in $(set | sed -nE 's/^(CURRENT_[^=]*)=.*/\1/p'); do
		declare -p "$CURRENT"
	done > "$CULT_ENV"

	exec 1>&4
	exec 2>&5

	[ -z "$CULT_FAIL" ] || fail
	[ -z "$SHOW_REPORT" ] || report

	return "$?$CULT_FAIL"
}

check_param() {
	[ 1 -lt "$#" ] && return
	tint 31 " $FAIL" 0 " '$1' parameter value is expected"
	exit 1
}

while true; do
	case "${1:-}" in
		-b | --begin) CULT_BEGIN="1" ;;
		-l | --log) SHOW_LOG="1" ;;
		-h | --help) SHOW_HELP="1" ;;
		-r | --report) SHOW_REPORT="1" ;;
		--logout) LOGOUT="1" ;;
		-a | --assert)
			check_param "$@"
			CULT_ASSERT+=("$2")
			shift
			;;
		-e | --env)
			check_param "$@"
			LOCAL_ENV="$2"
			shift
			;;

		-p | --print)
			check_param "$@"
			CULT_PRINT+=("$2")
			shift
			;;
		-v | --var)
			check_param "$@"
			CULT_VARIABLES["$2"]="$3"
			shift 2
			;;
		-t | --test)
			check_param "$@"
			CULT_STEP="$2"
			shift
			;;
		-c | --test-case)
			check_param "$@"
			CULT_CASE="Case: $2"
			shift
			;;
		-s | --test-scenario)
			check_param "$@"
			CULT_SCENARIO="Scenario: $2"
			shift
			;;
		-u | --user)
			check_param "$@"
			CULT_USER="$2"
			shift
			;;
		-C | --client)
			check_param "$@"
			CULT_CLIENT="$2"
			shift
			;;
		--)
			shift
			break
			;;
		*) break ;;
	esac
	shift
done

[ "$(ps -o stat= -p $$)" = "$(ps -o stat= -p $PPID)" ] || STANDALONE="1"

CULT_ENV="/tmp/$(basename "$0").env"
CULT_LOG="/tmp/$(basename "$0").log"
CULT_EMPTY="/tmp/$(basename "$0").empty"
CULT_TRACE="/tmp/$(basename "$0").trace"

OUTPUT=$(mktemp)
TRACE_ID="${OUTPUT#*.}"

trap 'flush' EXIT
touch "$CULT_LOG"

[ -n "$CULT_BEGIN" ] && cleanup

# shellcheck disable=SC1090
[ -f "$CULT_ENV" ] && . "$CULT_ENV"

# shellcheck disable=SC1090
[ -f "$LOCAL_ENV" ] && . "$LOCAL_ENV"

if [ -n "$SHOW_LOG" ]; then
	cat "$CULT_LOG"
elif [ -n "$STANDALONE" ]; then
	LOG_OFFSET=$(wc -l "$CULT_LOG" | cut -d ' ' -f1)
fi

if [ -n "$LOGOUT" ]; then
	CURRENT_CLIENT=''
	CURRENT_TOKEN=''
	CURRENT_USER=''
fi

exec 4>&1 > >(tee --append "$CULT_LOG")
exec 5>&2 2> >(sed "s/^/${TRACE_ID}: /" >> "$CULT_TRACE")

logger "SCENARIO"
logger "CASE"
logger "STEP"

prepare_query_params

if [ 0 -lt "$#" ]; then
	auth
	request "$@"
fi

assert_all
extract_variables
print_all
