#!/usr/bin/env bash
#
#  CUrL Tester
#  A simple REST test framework for shell script.
#
# shellcheck disable=SC1090,SC2064,SC2120

set -o errexit -o nounset -o pipefail

CULT_TEMP_DIR="/tmp/cult"

mkdir -p "$CULT_TEMP_DIR"

CULT_LOG="$CULT_TEMP_DIR/log"
CULT_CACHE="$CULT_TEMP_DIR/cache"
CULT_TRACE="$CULT_TEMP_DIR/trace"

# if it is sourced
if [ "${BASH_SOURCE[0]}" != "$0" ]; then

	# if it is the root script
	if [ 2 -eq "$SHLVL" ]; then

		echo -n > "$CULT_CACHE"
		echo -n > "$CULT_TRACE"
		echo -n > "$CULT_LOG"

		exec > >(tee --append "$CULT_LOG")
		exec 2>&1

		printf " \e[33;1m%s\e[m%s\e[33;1m%s\e[m%s\n" \
			"   ___        " "    " " __   _____ " "         _            " \
			"  / __\/\ /\\ " "_ __" " / /  /__   \\" "___  ___| |_ ___ _ __ " \
			" / /  / / \ \\" " '__" "/ /     / /\\/" " _ \/ __| __/ _ \ '__|" \
			"/ /___\ \_/ /" " |" " / /___  / /" " |  __/\__ \ ||  __/ |   " \
			"\____/ \___/" "|_|" " \____/  \/ " $'  \___||___/\__\___|_| \n'

		trap "${BASH_SOURCE[0]} --report \$? $0" EXIT

	else

		trap "${BASH_SOURCE[0]} --cleanup \$? $0" EXIT
	fi

	return
fi

: "${CULT_STEP:=}"
: "${CULT_CASE:=}"
: "${CULT_SCENARIO:=}"

: "${CULT_WAIT:=}"
: "${CULT_EXPECT:=2..}"

: "${CURRENT_STEP:=}"
: "${CURRENT_CASE:=}"
: "${CURRENT_SCENARIO:=}"

: "${CURRENT_LANG:=pt_BR}"
: "${CURRENT_STATUS:=}"
: "${CURRENT_RESPONSE:=}"

declare -a REQUEST_PARAMS
declare -a QUERY_PARAMS
declare -a CULT_ASSERT
declare -a CULT_PRINT
declare -A CULT_VARIABLES
declare -A CULT_VARIABLES_JSON
declare -A CURRENT_VARIABLES
declare -A CURRENT_VARIABLES_JSON

FAIL_ICON=$'\e[31;1m\u2717\e[m'
WARN_ICON=$'\e[33;1m\u25CF\e[m'
INFO_ICON=$'\e[32;1m\u2714\e[m'
STEP_ICONS=(
	$'\e[33;1m\u25cb\e[m'
	$'\e[33;1m\u25cf\e[m'
	$'\e[33;1m\u25cb\e[m'
	$'\e[33;1m\u25cc\e[m'
)

log_size() {
	sed -E 's/(\x1b\[s\x1b\[[0-9]+A.*\x1b\[u|\x0d$)//g;s/\x1b\[[0-9]+;[0-9]+[mGK]([^\x1b]+)\x1b\[m/\1/g' \
		"$CULT_LOG" | fold -w "$(tput cols)" | wc -l | cut -d ' ' -f1
}

update_label() {
	local CURRENT_LINE="CURRENT_$1_LINE"
	local POS=$((1 + "$(log_size)" - ${!CURRENT_LINE}))
	echo -ne "\e[s\e[${POS}A\r $2\e[u"
}

logger() {

	local CULT_ITEM="CULT_$1"
	local CURRENT_ITEM="CURRENT_$1"

	if [ -n "${!CULT_ITEM}" ]; then

		local FOUND=''
		local TEMP_ITEM
		local CURRENT_LINE="CURRENT_$1_LINE"

		for ITEM in SCENARIO CASE STEP; do

			if [ "$ITEM" = "$1" ]; then
				FOUND='1'
			elif [ -z "$FOUND" ]; then
				continue
			fi

			TEMP_ITEM="CURRENT_$ITEM"

			if [ -n "${!TEMP_ITEM}" ]; then
				update_label "$ITEM" "$INFO_ICON"
				declare -g "$TEMP_ITEM="
			fi
		done

		echo "[$1] ${!CULT_ITEM}" >&"$TRACE"
		echo -e " ${STEP_ICONS[0]} ${!CULT_ITEM}"

		declare -g "$CURRENT_ITEM=${!CULT_ITEM}"
		declare -g "$CURRENT_LINE=$(log_size)"
		declare -g "$CULT_ITEM="

	elif [ -n "${!CURRENT_ITEM}" ]; then

		local CURRENT_ICON="CURRENT_$1_ICON"
		declare -g "$CURRENT_ICON=$((1 + ${!CURRENT_ICON:-0}))"
		update_label "$1" "${STEP_ICONS[$((${!CURRENT_ICON} % "${#STEP_ICONS[@]}"))]}"
	fi
}

request() {

	local STATUS
	local CURL=(curl --silent --verbose --write-out '%{http_code}' --output "$OUTPUT" "$@")

	{
		echo -n "[REQUEST] ${CURL[0]}"
		printf " %q" "${CURL[@]:1}"
		echo
	} >&"$TRACE"

	while true; do
		STATUS=$("${CURL[@]}" 2>&"$TRACE" || test -n "$CULT_WAIT")
		[ "$STATUS" != '000' ] && break
		sleep 1
		logger "STEP"
	done

	CURRENT_STATUS="$STATUS"
	CURRENT_RESPONSE="$(< "$OUTPUT")"

	echo "[RESPONSE] $CURRENT_RESPONSE" >&"$TRACE"
}

cleanup() {

	local FAILED="${1:-$?}"
	local SCRIPT="${2:-}"

	if [ 0 -ne "$FAILED" ] || [ -n "$SCRIPT" ]; then
		local ITEM
		local ICON="$INFO_ICON"
		for ITEM in SCENARIO CASE STEP; do
			local CURRENT_ITEM="CURRENT_$ITEM"
			if [ -n "${!CURRENT_ITEM}" ]; then
				if [ 0 -ne "$FAILED" ]; then
					echo "[$ITEM:FAILED] ${!CURRENT_ITEM}" >&"$TRACE"
					ICON="$FAIL_ICON"
				fi
				update_label "$ITEM" "$ICON"
				declare -g "$CURRENT_ITEM="
			fi
		done
	fi

	if [ -n "$SCRIPT" ]; then
		echo "[SCRIPT] $SCRIPT" >&"$TRACE"
		if [ 0 -ne "$FAILED" ]; then
			echo "[SCRIPT:FAILED] $SCRIPT" >&"$TRACE"
			echo -e " $WARN_ICON $SCRIPT exited with error $FAILED." >&2
		fi
	fi

	for CURRENT in $(set | sed -nE 's/^(CURRENT_[^=]*)=.*/\1/p'); do
		declare -p "$CURRENT"
	done > "$CULT_CACHE"
}

count() {
	grep -cE "^[^:]+: \[$*\]" "$CULT_TRACE" || true
}

entry() {
	echo "$1 : $(count "$2") : $(count "$2:FAILED")"
}

title() {
	echo -e "\n\e[37;1m${*}\e[m\n"
}

report() {

	REQUESTS=$(count 'REQUEST')
	RESPONSES=$(count 'REQUEST')

	ASSERTIONS=$(count 'ASSERT')
	SUCCESSES=$(count 'INFO')

	FAILS=$((REQUESTS - RESPONSES + ASSERTIONS - SUCCESSES + $(count '[^:]+:FAILED')))

	title 'Report'

	column -ts: <<- EOF | sed 's/^/ /'
		Items : Executed : Failed
		$(entry "Scripts" "SCRIPT")
		$(entry "Scenarios" "SCENARIO")
		$(entry "Cases" "CASE")
		$(entry "Steps" "STEP")
		Requests : $REQUESTS : $((REQUESTS - RESPONSES))
		Assertions : $ASSERTIONS : $((ASSERTIONS - SUCCESSES))
	EOF

	title 'Result'

	if [ 0 -ne "$FAILS" ]; then
		echo -e " $FAIL_ICON FAILED\n"
	else
		echo -e " $INFO_ICON SUCCEEDED\n"
	fi

	return "$FAILS"
}

prepare_query_params() {
	local VARIABLE

	for VARIABLE in "${!CURRENT_VARIABLES[@]}"; do
		QUERY_PARAMS+=(--arg "$VARIABLE" "${CURRENT_VARIABLES["$VARIABLE"]}")
	done

	for VARIABLE in "${!CURRENT_VARIABLES_JSON[@]}"; do
		QUERY_PARAMS+=(--argjson "$VARIABLE" "${CURRENT_VARIABLES_JSON["$VARIABLE"]}")
	done
}

parse_data() {
	local DATA
	local FAKES

	DATA=$(jq "${QUERY_PARAMS[@]}" --from-file "$1" <(echo '{}'))
	FAKES=$(jq 'paths as $p | getpath($p) as $v | select($v | type == "string" and match("^!")) | [ $p | "." + join("."), $v | split("{") ] | flatten' <<< "$DATA" |
		sed -E 's/^(\s+"\.[^,]+)\.([0-9]+)\./\1[\2]./; s/^(\s+")!/\1/; s/^(\s+)"(.+)}"$/\1{\2}/; s/^\[/(/; s/]$/),/')

	if [ -n "$FAKES" ]; then
		python -c "import faker; print(faker.Faker(['$CURRENT_LANG']).json(data_columns=[$FAKES], num_rows=1))" |
			jq --compact-output 'paths as $p | getpath($p) as $v | [ $p | join("."), $v ]' |
			sed -E 's/^\[//; s/\]$//; s/^"([^"]+)",/\1=/; $!s/$/|/' |
			jq --compact-output --from-file /dev/stdin <(echo "$DATA")
	else
		echo "$DATA"
	fi
}

throw() {
	echo -e " $FAIL_ICON $*" >&2
	return 1
}

fail() {
	{
		title "Status \`${CURRENT_STATUS:-???}\`"
		echo -e "${CURRENT_RESPONSE:-<EMPTY>}\n"
	} >&2
	throw "$@"
}

query() {
	local PARAMS=("${QUERY_PARAMS[@]}" "$@")
	if ! jq "${PARAMS[@]}" <<< "${CURRENT_RESPONSE:-{\}}"; then
		fail "Query failed: ${PARAMS[*]}\n"
	fi
}

assert_all() {
	for ASSERT in "${CULT_ASSERT[@]}"; do
		echo "[ASSERT] $ASSERT" >&"$TRACE"
		query --exit-status "$ASSERT" >&"$TRACE"
		echo "[INFO] $ASSERT" >&"$TRACE"
	done
}

extract_variables() {
	local VARIABLE

	for VARIABLE in "${!CULT_VARIABLES[@]}"; do
		CURRENT_VARIABLES["$VARIABLE"]=$(query --raw-output "${CULT_VARIABLES["$VARIABLE"]}")
	done

	for VARIABLE in "${!CULT_VARIABLES_JSON[@]}"; do
		CURRENT_VARIABLES_JSON["$VARIABLE"]=$(query --compact-output "${CULT_VARIABLES_JSON["$VARIABLE"]}")
	done
}

substitute_request_params() {
	local VAR
	local VARS
	local PARAM

	VARS=$(printf "\$%s " "${!CURRENT_VARIABLES[@]}" "${!CURRENT_VARIABLES_JSON[@]}")

	for VAR in "${!CURRENT_VARIABLES[@]}"; do
		declare -x "$VAR=${CURRENT_VARIABLES[$VAR]}"
	done

	for VAR in "${!CURRENT_VARIABLES_JSON[@]}"; do
		declare -x "$VAR=${CURRENT_VARIABLES_JSON[$VAR]}"
	done

	for PARAM in "$@"; do
		REQUEST_PARAMS+=("$(envsubst "${VARS[@]}" <<< "$PARAM")")
	done
}

print_all() {
	for PRINT in "${CULT_PRINT[@]}"; do
		title "Response \`$PRINT\`"
		query --color-output "$PRINT"
		echo
	done | sed 's/^/    /'
}

check_param() {
	[ 1 -lt "$#" ] && return
	throw "'$1' parameter value is expected"
}

assign_label() {
	local CULT_ITEM="CULT_$1"
	local CURRENT_ITEM="CURRENT_$1"
	[ "${!CURRENT_ITEM}" = "$2" ] || declare -g "$CULT_ITEM=$2"
}

OUTPUT=$(mktemp)
TRACE_ID="${OUTPUT#*.}"

exec {TRACE}> >(sed "s/^/${TRACE_ID}: /" >> "$CULT_TRACE")

[ -f "$CULT_CACHE" ] && . "$CULT_CACHE"

while true; do
	case "${1:-}" in
		--report)
			cleanup "$2" "$3"
			report
			exit "$(($? + $2))"
			;;
		--cleanup)
			cleanup "$2" "$3"
			exit "$2"
			;;
		-w | --wait) CULT_WAIT='1' ;;
		-l | --lang)
			check_param "$@"
			CURRENT_LANG="$2"
			shift
			;;
		-o | --output)
			check_param "$@"
			OUTPUT="$2"
			shift
			;;
		-t | --test)
			check_param "$@"
			CULT_ASSERT+=("$2")
			shift
			;;
		-e | --expect)
			check_param "$@"
			CULT_EXPECT="$2"
			shift
			;;
		-p | --print)
			check_param "$@"
			CULT_PRINT+=("$2")
			shift
			;;
		-v | --var)
			check_param "$@"
			CULT_VARIABLES["$2"]="$3"
			shift 2
			;;
		-j | --varjson)
			check_param "$@"
			CULT_VARIABLES_JSON["$2"]="$3"
			shift 2
			;;
		-s | --step)
			check_param "$@"
			assign_label 'STEP' "           $2"
			shift
			;;
		-c | --case)
			check_param "$@"
			assign_label 'CASE' "     Case: $2"
			shift
			;;
		-S | --scenario)
			check_param "$@"
			assign_label 'SCENARIO' " Scenario: $2"
			shift
			;;
		--)
			shift
			break
			;;
		*) break ;;
	esac
	shift
done

trap 'cleanup' EXIT

logger "SCENARIO"
logger "CASE"
logger "STEP"

prepare_query_params

if [ 0 -lt "$#" ]; then

	if [ ! -t 0 ]; then
		REQUEST_PARAMS+=(--header "Content-Type: application/json")
		REQUEST_PARAMS+=(--data-binary "$(parse_data /dev/stdin)")
	fi

	substitute_request_params "$@"

	request "${REQUEST_PARAMS[@]}"

	grep -qE "$CULT_EXPECT" <<< "$CURRENT_STATUS" || fail "Status differs from expected [$CULT_EXPECT]."
fi

assert_all
extract_variables
print_all
